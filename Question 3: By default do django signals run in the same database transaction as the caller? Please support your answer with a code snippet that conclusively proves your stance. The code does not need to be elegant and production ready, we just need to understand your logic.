Yes, by default Django signals run in the same database transaction as the caller.


Proof:

python
Copy code
from django.db import transaction
from django.db.models.signals import post_save
from django.dispatch import receiver
from django.contrib.auth.models import User

@receiver(post_save, sender=User)
def signal_handler(sender, instance, **kwargs):
    print(f"Inside signal - Transaction status: {transaction.get_autocommit()}")

def create_user():
    with transaction.atomic():  # Start a transaction block
        print(f"Before creating user - Transaction status: {transaction.get_autocommit()}")
        User.objects.create(username="test_user")
        print(f"After creating user - Transaction status: {transaction.get_autocommit()}")

create_user()
Expected Output:

pgsql
Copy code
Before creating user - Transaction status: False
Inside signal - Transaction status: False
After creating user - Transaction status: False
Since transaction.get_autocommit() returns False inside the signal handler, it confirms that Django signals run within the same transaction as the caller.
