 Yes, by default Django signals run in the same thread as the caller.

Proof:

python
Copy code
import threading
from django.db.models.signals import post_save
from django.dispatch import receiver
from django.contrib.auth.models import User

@receiver(post_save, sender=User)
def signal_handler(sender, instance, **kwargs):
    print(f"Signal running in thread: {threading.current_thread().name}")

# Main thread before signal
print(f"Main thread: {threading.current_thread().name}")

# Creating a new user (this triggers the signal)
User.objects.create(username="test_user")
Expected Output:

arduino
Copy code
Main thread: MainThread
Signal running in thread: MainThread
Since the signal runs in MainThread, it confirms that Django signals execute in the same thread as the caller.
